
SNAKE4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000e60  00000ef4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000620  0080012e  0080012e  00000f22  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000f98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000233d  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ead  00000000  00000000  0000349d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001169  00000000  00000000  0000434a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000464  00000000  00000000  000054b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088f  00000000  00000000  00005918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010e8  00000000  00000000  000061a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000728f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	43 c1       	rjmp	.+646    	; 0x288 <__ctors_end>
   2:	00 00       	nop
   4:	5e c1       	rjmp	.+700    	; 0x2c2 <__bad_interrupt>
   6:	00 00       	nop
   8:	5c c1       	rjmp	.+696    	; 0x2c2 <__bad_interrupt>
   a:	00 00       	nop
   c:	5a c1       	rjmp	.+692    	; 0x2c2 <__bad_interrupt>
   e:	00 00       	nop
  10:	58 c1       	rjmp	.+688    	; 0x2c2 <__bad_interrupt>
  12:	00 00       	nop
  14:	56 c1       	rjmp	.+684    	; 0x2c2 <__bad_interrupt>
  16:	00 00       	nop
  18:	54 c1       	rjmp	.+680    	; 0x2c2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	52 c1       	rjmp	.+676    	; 0x2c2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	50 c1       	rjmp	.+672    	; 0x2c2 <__bad_interrupt>
  22:	00 00       	nop
  24:	4c c2       	rjmp	.+1176   	; 0x4be <__vector_9>
  26:	00 00       	nop
  28:	4c c1       	rjmp	.+664    	; 0x2c2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4a c1       	rjmp	.+660    	; 0x2c2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	48 c1       	rjmp	.+656    	; 0x2c2 <__bad_interrupt>
  32:	00 00       	nop
  34:	46 c1       	rjmp	.+652    	; 0x2c2 <__bad_interrupt>
  36:	00 00       	nop
  38:	44 c1       	rjmp	.+648    	; 0x2c2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	42 c1       	rjmp	.+644    	; 0x2c2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	40 c1       	rjmp	.+640    	; 0x2c2 <__bad_interrupt>
  42:	00 00       	nop
  44:	3e c1       	rjmp	.+636    	; 0x2c2 <__bad_interrupt>
  46:	00 00       	nop
  48:	3c c1       	rjmp	.+632    	; 0x2c2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3a c1       	rjmp	.+628    	; 0x2c2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	38 c1       	rjmp	.+624    	; 0x2c2 <__bad_interrupt>
  52:	00 00       	nop
  54:	36 c1       	rjmp	.+620    	; 0x2c2 <__bad_interrupt>
  56:	00 00       	nop
  58:	34 c1       	rjmp	.+616    	; 0x2c2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	32 c1       	rjmp	.+612    	; 0x2c2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	30 c1       	rjmp	.+608    	; 0x2c2 <__bad_interrupt>
  62:	00 00       	nop
  64:	2e c1       	rjmp	.+604    	; 0x2c2 <__bad_interrupt>
  66:	00 00       	nop
  68:	2c c1       	rjmp	.+600    	; 0x2c2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2a c1       	rjmp	.+596    	; 0x2c2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	28 c1       	rjmp	.+592    	; 0x2c2 <__bad_interrupt>
  72:	00 00       	nop
  74:	26 c1       	rjmp	.+588    	; 0x2c2 <__bad_interrupt>
  76:	00 00       	nop
  78:	24 c1       	rjmp	.+584    	; 0x2c2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	22 c1       	rjmp	.+580    	; 0x2c2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	20 c1       	rjmp	.+576    	; 0x2c2 <__bad_interrupt>
  82:	00 00       	nop
  84:	1e c1       	rjmp	.+572    	; 0x2c2 <__bad_interrupt>
  86:	00 00       	nop
  88:	1c c1       	rjmp	.+568    	; 0x2c2 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
	...
  94:	00 00       	nop
  96:	80 c0       	rjmp	.+256    	; 0x198 <__trampolines_end+0x10c>
  98:	c0 60       	ori	r28, 0x00	; 0
  9a:	60 40       	sbci	r22, 0x00	; 0
  9c:	c0 c0       	rjmp	.+384    	; 0x21e <__trampolines_end+0x192>
  9e:	40 00       	.word	0x0040	; ????
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <__trampolines_end+0x16>
  a2:	c0 c0       	rjmp	.+384    	; 0x224 <__trampolines_end+0x198>
  a4:	c0 c0       	rjmp	.+384    	; 0x226 <__trampolines_end+0x19a>
  a6:	c0 00       	.word	0x00c0	; ????
  a8:	00 00       	nop
  aa:	c0 c0       	rjmp	.+384    	; 0x22c <__trampolines_end+0x1a0>
  ac:	c0 c0       	rjmp	.+384    	; 0x22e <__trampolines_end+0x1a2>
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	c0 c0       	rjmp	.+384    	; 0x234 <__trampolines_end+0x1a8>
  b4:	c0 c0       	rjmp	.+384    	; 0x236 <__trampolines_end+0x1aa>
  b6:	c0 c0       	rjmp	.+384    	; 0x238 <__trampolines_end+0x1ac>
  b8:	c0 c0       	rjmp	.+384    	; 0x23a <__trampolines_end+0x1ae>
  ba:	00 00       	nop
  bc:	00 00       	nop
  be:	c0 c0       	rjmp	.+384    	; 0x240 <__trampolines_end+0x1b4>
  c0:	c0 c0       	rjmp	.+384    	; 0x242 <__trampolines_end+0x1b6>
  c2:	c0 c0       	rjmp	.+384    	; 0x244 <__trampolines_end+0x1b8>
  c4:	00 00       	nop
  c6:	c0 c0       	rjmp	.+384    	; 0x248 <__trampolines_end+0x1bc>
  c8:	c0 c0       	rjmp	.+384    	; 0x24a <__trampolines_end+0x1be>
  ca:	c0 00       	.word	0x00c0	; ????
  cc:	00 80       	ld	r0, Z
  ce:	c0 c0       	rjmp	.+384    	; 0x250 <__trampolines_end+0x1c4>
  d0:	c0 c0       	rjmp	.+384    	; 0x252 <__trampolines_end+0x1c6>
  d2:	c0 c0       	rjmp	.+384    	; 0x254 <__trampolines_end+0x1c8>
  d4:	c0 c0       	rjmp	.+384    	; 0x256 <__trampolines_end+0x1ca>
  d6:	c0 c0       	rjmp	.+384    	; 0x258 <__trampolines_end+0x1cc>
  d8:	40 00       	.word	0x0040	; ????
	...
  e6:	00 80       	ld	r0, Z
  e8:	c0 c7       	rjmp	.+3968   	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
  ea:	0f 1f       	adc	r16, r31
  ec:	3f fc       	.word	0xfc3f	; ????
  ee:	fc f8       	.word	0xf8fc	; ????
  f0:	30 00       	.word	0x0030	; ????
  f2:	80 80       	ld	r8, Z
  f4:	f0 fe       	sbrs	r15, 0
  f6:	0f 03       	fmul	r16, r23
  f8:	0f 7f       	andi	r16, 0xFF	; 255
  fa:	ff ff       	.word	0xffff	; ????
  fc:	f8 f0       	brcs	.+62     	; 0x13c <__trampolines_end+0xb0>
  fe:	fc 0f       	add	r31, r28
 100:	01 80       	ldd	r0, Z+1	; 0x01
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	f0 1c       	adc	r15, r0
 106:	1e 13       	cpse	r17, r30
 108:	10 f8       	bld	r1, 0
 10a:	ff ff       	.word	0xffff	; ????
 10c:	ff 80       	ldd	r15, Y+7	; 0x07
 10e:	00 00       	nop
 110:	80 f0       	brcs	.+32     	; 0x132 <__trampolines_end+0xa6>
 112:	fe ff       	.word	0xfffe	; ????
 114:	ff 07       	cpc	r31, r31
 116:	01 98       	cbi	0x00, 1	; 0
 118:	fc fe       	.word	0xfefc	; ????
 11a:	ff e3       	ldi	r31, 0x3F	; 63
 11c:	81 00       	.word	0x0081	; ????
 11e:	00 80       	ld	r0, Z
 120:	e0 fc       	sbrc	r14, 0
 122:	ff ff       	.word	0xffff	; ????
 124:	9f 9b       	sbis	0x13, 7	; 19
 126:	98 80       	ld	r9, Y
 128:	c0 c1       	rjmp	.+896    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 12a:	01 01       	movw	r0, r2
	...
 138:	00 00       	nop
 13a:	00 03       	mulsu	r16, r16
 13c:	03 01       	movw	r0, r6
 13e:	03 03       	mulsu	r16, r19
 140:	03 03       	mulsu	r16, r19
 142:	01 00       	.word	0x0001	; ????
 144:	00 00       	nop
 146:	03 03       	mulsu	r16, r19
 148:	03 03       	mulsu	r16, r19
 14a:	00 00       	nop
 14c:	00 00       	nop
 14e:	03 03       	mulsu	r16, r19
 150:	03 03       	mulsu	r16, r19
 152:	00 00       	nop
 154:	00 03       	mulsu	r16, r16
 156:	03 03       	mulsu	r16, r19
 158:	03 00       	.word	0x0003	; ????
 15a:	00 02       	muls	r16, r16
 15c:	03 03       	mulsu	r16, r19
 15e:	03 03       	mulsu	r16, r19
 160:	03 00       	.word	0x0003	; ????
 162:	00 03       	mulsu	r16, r16
 164:	03 03       	mulsu	r16, r19
 166:	03 03       	mulsu	r16, r19
 168:	03 00       	.word	0x0003	; ????
 16a:	00 03       	mulsu	r16, r16
 16c:	03 03       	mulsu	r16, r19
 16e:	03 03       	mulsu	r16, r19
 170:	01 00       	.word	0x0001	; ????
 172:	02 03       	mulsu	r16, r18
 174:	03 03       	mulsu	r16, r19
 176:	03 03       	mulsu	r16, r19
 178:	03 03       	mulsu	r16, r19
 17a:	03 03       	mulsu	r16, r19
 17c:	03 00       	.word	0x0003	; ????
	...
 18e:	00 00       	nop
 190:	3c 00       	.word	0x003c	; ????
 192:	20 10       	cpse	r2, r0
 194:	00 f0       	brcs	.+0      	; 0x196 <__trampolines_end+0x10a>
	...
 1e2:	00 00       	nop
 1e4:	c0 40       	sbci	r28, 0x00	; 0
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <__trampolines_end+0x15c>
 1e8:	00 00       	nop
 1ea:	80 00       	.word	0x0080	; ????
 1ec:	80 80       	ld	r8, Z
 1ee:	00 00       	nop
 1f0:	40 00       	.word	0x0040	; ????
 1f2:	80 00       	.word	0x0080	; ????
 1f4:	00 00       	nop
 1f6:	80 00       	.word	0x0080	; ????
 1f8:	00 00       	nop
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <__trampolines_end+0x170>
 1fc:	40 00       	.word	0x0040	; ????
 1fe:	c0 00       	.word	0x00c0	; ????
 200:	00 c0       	rjmp	.+0      	; 0x202 <__trampolines_end+0x176>
 202:	00 80       	ld	r0, Z
 204:	00 00       	nop
 206:	00 00       	nop
 208:	80 00       	.word	0x0080	; ????
 20a:	00 80       	ld	r0, Z
 20c:	80 80       	ld	r8, Z
 20e:	80 00       	.word	0x0080	; ????
 210:	80 00       	.word	0x0080	; ????
	...
 236:	00 02       	muls	r16, r16
 238:	03 00       	.word	0x0003	; ????
 23a:	02 01       	movw	r0, r4
 23c:	00 02       	muls	r16, r16
 23e:	03 00       	.word	0x0003	; ????
 240:	03 00       	.word	0x0003	; ????
 242:	00 03       	mulsu	r16, r16
 244:	00 02       	muls	r16, r16
 246:	00 00       	nop
 248:	03 00       	.word	0x0003	; ????
 24a:	00 00       	nop
 24c:	00 00       	nop
 24e:	02 03       	mulsu	r16, r18
 250:	00 00       	nop
 252:	00 00       	nop
 254:	03 00       	.word	0x0003	; ????
 256:	00 03       	mulsu	r16, r16
 258:	00 02       	muls	r16, r16
 25a:	00 00       	nop
 25c:	03 00       	.word	0x0003	; ????
 25e:	00 03       	mulsu	r16, r16
 260:	00 00       	nop
 262:	03 00       	.word	0x0003	; ????
 264:	03 00       	.word	0x0003	; ????
	...

00000284 <pgm_cfg>:
 284:	c0 0f 01 00                                         ....

00000288 <__ctors_end>:
 288:	11 24       	eor	r1, r1
 28a:	1f be       	out	0x3f, r1	; 63
 28c:	cf ef       	ldi	r28, 0xFF	; 255
 28e:	d0 e4       	ldi	r29, 0x40	; 64
 290:	de bf       	out	0x3e, r29	; 62
 292:	cd bf       	out	0x3d, r28	; 61

00000294 <__do_copy_data>:
 294:	11 e0       	ldi	r17, 0x01	; 1
 296:	a0 e0       	ldi	r26, 0x00	; 0
 298:	b1 e0       	ldi	r27, 0x01	; 1
 29a:	e0 e6       	ldi	r30, 0x60	; 96
 29c:	fe e0       	ldi	r31, 0x0E	; 14
 29e:	00 e0       	ldi	r16, 0x00	; 0
 2a0:	0b bf       	out	0x3b, r16	; 59
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <__do_copy_data+0x14>
 2a4:	07 90       	elpm	r0, Z+
 2a6:	0d 92       	st	X+, r0
 2a8:	ae 32       	cpi	r26, 0x2E	; 46
 2aa:	b1 07       	cpc	r27, r17
 2ac:	d9 f7       	brne	.-10     	; 0x2a4 <__do_copy_data+0x10>

000002ae <__do_clear_bss>:
 2ae:	27 e0       	ldi	r18, 0x07	; 7
 2b0:	ae e2       	ldi	r26, 0x2E	; 46
 2b2:	b1 e0       	ldi	r27, 0x01	; 1
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <.do_clear_bss_start>

000002b6 <.do_clear_bss_loop>:
 2b6:	1d 92       	st	X+, r1

000002b8 <.do_clear_bss_start>:
 2b8:	ae 34       	cpi	r26, 0x4E	; 78
 2ba:	b2 07       	cpc	r27, r18
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <.do_clear_bss_loop>
 2be:	92 d0       	rcall	.+292    	; 0x3e4 <main>
 2c0:	cd c5       	rjmp	.+2970   	; 0xe5c <_exit>

000002c2 <__bad_interrupt>:
 2c2:	9e ce       	rjmp	.-708    	; 0x0 <__vectors>

000002c4 <ADC_Init>:

#include "ADC_H.h"

void ADC_Init()
{
	DDRA = 0x00;		/* Make ADC port as input */
 2c4:	11 b8       	out	0x01, r1	; 1
	ADCSRA = 0x87;		/* Enable ADC, fr/128  */
 2c6:	87 e8       	ldi	r24, 0x87	; 135
 2c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADMUX = 0x40;		/* Vref: Avcc, ADC channel: 0 */
 2cc:	80 e4       	ldi	r24, 0x40	; 64
 2ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 2d2:	08 95       	ret

000002d4 <ADC_Read>:

int ADC_Read(char channel)
{
	int ADC_value;
	
	ADMUX = (0x40) | (channel & 0x07);/* set input channel to read */
 2d4:	87 70       	andi	r24, 0x07	; 7
 2d6:	80 64       	ori	r24, 0x40	; 64
 2d8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);	/* start conversion */
 2dc:	ea e7       	ldi	r30, 0x7A	; 122
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	80 64       	ori	r24, 0x40	; 64
 2e4:	80 83       	st	Z, r24
	while((ADCSRA &(1<<ADIF))== 0);	/* monitor end of conversion interrupt flag */
 2e6:	80 81       	ld	r24, Z
 2e8:	84 ff       	sbrs	r24, 4
 2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <ADC_Read+0x12>
	
	ADCSRA |= (1<<ADIF);	/* clear interrupt flag */
 2ec:	ea e7       	ldi	r30, 0x7A	; 122
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	80 61       	ori	r24, 0x10	; 16
 2f4:	80 83       	st	Z, r24
	ADC_value = (int)ADCL;	/* read lower byte */
 2f6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	ADC_value = ADC_value + (int)ADCH*256;/* read higher 2 bits, Multiply with weightage */
 2fa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

	return ADC_value;		/* return digital value */
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	98 2f       	mov	r25, r24
 302:	88 27       	eor	r24, r24
 304:	82 0f       	add	r24, r18
 306:	91 1d       	adc	r25, r1
 308:	08 95       	ret

0000030a <set_borders>:
							from EEPROM address 0 */
	eeprom_read_block(R_array,0,strlen(W_array));	/* Read EEPROM 
							from address 0 */
	LCD_String(R_array);		/* Print Read_array on LCD */
	//return(0);
}
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	c1 e0       	ldi	r28, 0x01	; 1
 310:	d0 e0       	ldi	r29, 0x00	; 0
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	be 01       	movw	r22, r28
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	56 d1       	rcall	.+684    	; 0x5c8 <nokia_lcd_set_pixel>
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	be 01       	movw	r22, r28
 320:	82 e5       	ldi	r24, 0x52	; 82
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	51 d1       	rcall	.+674    	; 0x5c8 <nokia_lcd_set_pixel>
 326:	21 96       	adiw	r28, 0x01	; 1
 328:	cc 32       	cpi	r28, 0x2C	; 44
 32a:	d1 05       	cpc	r29, r1
 32c:	91 f7       	brne	.-28     	; 0x312 <set_borders+0x8>
 32e:	c0 e0       	ldi	r28, 0x00	; 0
 330:	d0 e0       	ldi	r29, 0x00	; 0
 332:	41 e0       	ldi	r20, 0x01	; 1
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	ce 01       	movw	r24, r28
 33a:	46 d1       	rcall	.+652    	; 0x5c8 <nokia_lcd_set_pixel>
 33c:	41 e0       	ldi	r20, 0x01	; 1
 33e:	6c e2       	ldi	r22, 0x2C	; 44
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	ce 01       	movw	r24, r28
 344:	41 d1       	rcall	.+642    	; 0x5c8 <nokia_lcd_set_pixel>
 346:	21 96       	adiw	r28, 0x01	; 1
 348:	c3 35       	cpi	r28, 0x53	; 83
 34a:	d1 05       	cpc	r29, r1
 34c:	91 f7       	brne	.-28     	; 0x332 <set_borders+0x28>
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <switch_keys>:
 354:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <ADC_ValueY>
 358:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <ADC_ValueY+0x1>
 35c:	80 32       	cpi	r24, 0x20	; 32
 35e:	23 e0       	ldi	r18, 0x03	; 3
 360:	92 07       	cpc	r25, r18
 362:	7c f0       	brlt	.+30     	; 0x382 <switch_keys+0x2e>
 364:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <ADC_ValueX>
 368:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <ADC_ValueX+0x1>
 36c:	20 59       	subi	r18, 0x90	; 144
 36e:	31 40       	sbci	r19, 0x01	; 1
 370:	29 3c       	cpi	r18, 0xC9	; 201
 372:	31 05       	cpc	r19, r1
 374:	c0 f4       	brcc	.+48     	; 0x3a6 <switch_keys+0x52>
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	c2 d2       	rcall	.+1412   	; 0x8fe <snakes>
 37a:	22 e0       	ldi	r18, 0x02	; 2
 37c:	fc 01       	movw	r30, r24
 37e:	27 83       	std	Z+7, r18	; 0x07
 380:	08 95       	ret
 382:	89 3c       	cpi	r24, 0xC9	; 201
 384:	91 05       	cpc	r25, r1
 386:	7c f4       	brge	.+30     	; 0x3a6 <switch_keys+0x52>
 388:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <ADC_ValueX>
 38c:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <ADC_ValueX+0x1>
 390:	20 59       	subi	r18, 0x90	; 144
 392:	31 40       	sbci	r19, 0x01	; 1
 394:	29 3c       	cpi	r18, 0xC9	; 201
 396:	31 05       	cpc	r19, r1
 398:	30 f4       	brcc	.+12     	; 0x3a6 <switch_keys+0x52>
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	b0 d2       	rcall	.+1376   	; 0x8fe <snakes>
 39e:	23 e0       	ldi	r18, 0x03	; 3
 3a0:	fc 01       	movw	r30, r24
 3a2:	27 83       	std	Z+7, r18	; 0x07
 3a4:	08 95       	ret
 3a6:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <ADC_ValueX>
 3aa:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <ADC_ValueX+0x1>
 3ae:	29 3c       	cpi	r18, 0xC9	; 201
 3b0:	31 05       	cpc	r19, r1
 3b2:	5c f4       	brge	.+22     	; 0x3ca <switch_keys+0x76>
 3b4:	80 59       	subi	r24, 0x90	; 144
 3b6:	91 40       	sbci	r25, 0x01	; 1
 3b8:	89 3c       	cpi	r24, 0xC9	; 201
 3ba:	91 05       	cpc	r25, r1
 3bc:	90 f4       	brcc	.+36     	; 0x3e2 <switch_keys+0x8e>
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	9e d2       	rcall	.+1340   	; 0x8fe <snakes>
 3c2:	21 e0       	ldi	r18, 0x01	; 1
 3c4:	fc 01       	movw	r30, r24
 3c6:	27 83       	std	Z+7, r18	; 0x07
 3c8:	08 95       	ret
 3ca:	20 32       	cpi	r18, 0x20	; 32
 3cc:	33 40       	sbci	r19, 0x03	; 3
 3ce:	4c f0       	brlt	.+18     	; 0x3e2 <switch_keys+0x8e>
 3d0:	80 59       	subi	r24, 0x90	; 144
 3d2:	91 40       	sbci	r25, 0x01	; 1
 3d4:	89 3c       	cpi	r24, 0xC9	; 201
 3d6:	91 05       	cpc	r25, r1
 3d8:	20 f4       	brcc	.+8      	; 0x3e2 <switch_keys+0x8e>
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	90 d2       	rcall	.+1312   	; 0x8fe <snakes>
 3de:	fc 01       	movw	r30, r24
 3e0:	17 82       	std	Z+7, r1	; 0x07
 3e2:	08 95       	ret

000003e4 <main>:
 3e4:	8e e4       	ldi	r24, 0x4E	; 78
 3e6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 3ea:	e0 eb       	ldi	r30, 0xB0	; 176
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	82 60       	ori	r24, 0x02	; 2
 3f2:	80 83       	st	Z, r24
 3f4:	e1 eb       	ldi	r30, 0xB1	; 177
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	87 60       	ori	r24, 0x07	; 7
 3fc:	80 83       	st	Z, r24
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	87 b9       	out	0x07, r24	; 7
 408:	18 b8       	out	0x08, r1	; 8
 40a:	8a b9       	out	0x0a, r24	; 10
 40c:	1b b8       	out	0x0b, r1	; 11
 40e:	ee d3       	rcall	.+2012   	; 0xbec <check_and_load_defaults>
 410:	90 d0       	rcall	.+288    	; 0x532 <nokia_lcd_init>
 412:	c5 d0       	rcall	.+394    	; 0x59e <nokia_lcd_clear>
 414:	cb d1       	rcall	.+918    	; 0x7ac <nokia_lcd_draw>
 416:	23 d2       	rcall	.+1094   	; 0x85e <nokia_lcd_render>
 418:	2f ef       	ldi	r18, 0xFF	; 255
 41a:	8d e3       	ldi	r24, 0x3D	; 61
 41c:	99 e4       	ldi	r25, 0x49	; 73
 41e:	21 50       	subi	r18, 0x01	; 1
 420:	80 40       	sbci	r24, 0x00	; 0
 422:	90 40       	sbci	r25, 0x00	; 0
 424:	e1 f7       	brne	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	b9 d0       	rcall	.+370    	; 0x59e <nokia_lcd_clear>
 42c:	ef ef       	ldi	r30, 0xFF	; 255
 42e:	f4 e3       	ldi	r31, 0x34	; 52
 430:	2c e0       	ldi	r18, 0x0C	; 12
 432:	e1 50       	subi	r30, 0x01	; 1
 434:	f0 40       	sbci	r31, 0x00	; 0
 436:	20 40       	sbci	r18, 0x00	; 0
 438:	e1 f7       	brne	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
 43e:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <ram_cfg+0x2>
 442:	59 d2       	rcall	.+1202   	; 0x8f6 <snake_init>
 444:	0c d2       	rcall	.+1048   	; 0x85e <nokia_lcd_render>
 446:	78 94       	sei
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <game_on>
 44e:	3a df       	rcall	.-396    	; 0x2c4 <ADC_Init>
 450:	ca e4       	ldi	r28, 0x4A	; 74
 452:	d7 e0       	ldi	r29, 0x07	; 7
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	3e df       	rcall	.-388    	; 0x2d4 <ADC_Read>
 458:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <ADC_ValueX+0x1>
 45c:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <ADC_ValueX>
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	38 df       	rcall	.-400    	; 0x2d4 <ADC_Read>
 464:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <ADC_ValueY+0x1>
 468:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <ADC_ValueY>
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	32 df       	rcall	.-412    	; 0x2d4 <ADC_Read>
 470:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <ADC_ValueB+0x1>
 474:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <ADC_ValueB>
 478:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <Timer1>
 47c:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <Timer1+0x1>
 480:	89 2b       	or	r24, r25
 482:	41 f7       	brne	.-48     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 484:	67 df       	rcall	.-306    	; 0x354 <switch_keys>
 486:	41 df       	rcall	.-382    	; 0x30a <set_borders>
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	39 d2       	rcall	.+1138   	; 0x8fe <snakes>
 48c:	86 5f       	subi	r24, 0xF6	; 246
 48e:	9b 4f       	sbci	r25, 0xFB	; 251
 490:	fc 01       	movw	r30, r24
 492:	80 81       	ld	r24, Z
 494:	91 81       	ldd	r25, Z+1	; 0x01
 496:	89 2b       	or	r24, r25
 498:	59 f0       	breq	.+22     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	30 d2       	rcall	.+1120   	; 0x8fe <snakes>
 49e:	86 5f       	subi	r24, 0xF6	; 246
 4a0:	9b 4f       	sbci	r25, 0xFB	; 251
 4a2:	fc 01       	movw	r30, r24
 4a4:	00 81       	ld	r16, Z
 4a6:	11 81       	ldd	r17, Z+1	; 0x01
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	29 d2       	rcall	.+1106   	; 0x8fe <snakes>
 4ac:	f8 01       	movw	r30, r16
 4ae:	09 95       	icall
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <Timer1+0x1>
 4b8:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <Timer1>
 4bc:	cb cf       	rjmp	.-106    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>

000004be <__vector_9>:

// Set ISR Timer
ISR (TIMER2_COMPA_vect)
{
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	8f 93       	push	r24
 4ca:	9f 93       	push	r25
	unsigned short n;

	n = Timer1;
 4cc:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <Timer1>
 4d0:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <Timer1+0x1>
	if(n) Timer1 = --n;
 4d4:	00 97       	sbiw	r24, 0x00	; 0
 4d6:	29 f0       	breq	.+10     	; 0x4e2 <__vector_9+0x24>
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <Timer1+0x1>
 4de:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <Timer1>
 4e2:	9f 91       	pop	r25
 4e4:	8f 91       	pop	r24
 4e6:	0f 90       	pop	r0
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	0f 90       	pop	r0
 4ec:	1f 90       	pop	r1
 4ee:	18 95       	reti

000004f0 <write>:
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
	nokia_lcd.cursor_y = y;
 4f0:	29 98       	cbi	0x05, 1	; 5
 4f2:	66 23       	and	r22, r22
 4f4:	11 f0       	breq	.+4      	; 0x4fa <write+0xa>
 4f6:	2b 9a       	sbi	0x05, 3	; 5
 4f8:	15 c0       	rjmp	.+42     	; 0x524 <write+0x34>
 4fa:	2b 98       	cbi	0x05, 3	; 5
 4fc:	13 c0       	rjmp	.+38     	; 0x524 <write+0x34>
 4fe:	ac 01       	movw	r20, r24
 500:	02 2e       	mov	r0, r18
 502:	02 c0       	rjmp	.+4      	; 0x508 <write+0x18>
 504:	55 95       	asr	r21
 506:	47 95       	ror	r20
 508:	0a 94       	dec	r0
 50a:	e2 f7       	brpl	.-8      	; 0x504 <write+0x14>
 50c:	40 ff       	sbrs	r20, 0
 50e:	02 c0       	rjmp	.+4      	; 0x514 <write+0x24>
 510:	2c 9a       	sbi	0x05, 4	; 5
 512:	01 c0       	rjmp	.+2      	; 0x516 <write+0x26>
 514:	2c 98       	cbi	0x05, 4	; 5
 516:	2d 9a       	sbi	0x05, 5	; 5
 518:	2d 98       	cbi	0x05, 5	; 5
 51a:	21 50       	subi	r18, 0x01	; 1
 51c:	31 09       	sbc	r19, r1
 51e:	78 f7       	brcc	.-34     	; 0x4fe <write+0xe>
 520:	29 9a       	sbi	0x05, 1	; 5
 522:	08 95       	ret
 524:	27 e0       	ldi	r18, 0x07	; 7
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	e9 cf       	rjmp	.-46     	; 0x4fe <write+0xe>

0000052c <write_cmd>:
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	e0 cf       	rjmp	.-64     	; 0x4f0 <write>
 530:	08 95       	ret

00000532 <nokia_lcd_init>:
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	21 9a       	sbi	0x04, 1	; 4
 538:	22 9a       	sbi	0x04, 2	; 4
 53a:	23 9a       	sbi	0x04, 3	; 4
 53c:	24 9a       	sbi	0x04, 4	; 4
 53e:	25 9a       	sbi	0x04, 5	; 4
 540:	2a 9a       	sbi	0x05, 2	; 5
 542:	29 9a       	sbi	0x05, 1	; 5
 544:	83 ec       	ldi	r24, 0xC3	; 195
 546:	99 e0       	ldi	r25, 0x09	; 9
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <nokia_lcd_init+0x16>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <nokia_lcd_init+0x1c>
 54e:	00 00       	nop
 550:	2a 98       	cbi	0x05, 2	; 5
 552:	8b e5       	ldi	r24, 0x5B	; 91
 554:	94 e4       	ldi	r25, 0x44	; 68
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <nokia_lcd_init+0x24>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <nokia_lcd_init+0x2a>
 55c:	00 00       	nop
 55e:	2a 9a       	sbi	0x05, 2	; 5
 560:	29 98       	cbi	0x05, 1	; 5
 562:	81 e2       	ldi	r24, 0x21	; 33
 564:	e3 df       	rcall	.-58     	; 0x52c <write_cmd>
 566:	83 e1       	ldi	r24, 0x13	; 19
 568:	e1 df       	rcall	.-62     	; 0x52c <write_cmd>
 56a:	86 e0       	ldi	r24, 0x06	; 6
 56c:	df df       	rcall	.-66     	; 0x52c <write_cmd>
 56e:	82 ec       	ldi	r24, 0xC2	; 194
 570:	dd df       	rcall	.-70     	; 0x52c <write_cmd>
 572:	80 e2       	ldi	r24, 0x20	; 32
 574:	db df       	rcall	.-74     	; 0x52c <write_cmd>
 576:	89 e0       	ldi	r24, 0x09	; 9
 578:	d9 df       	rcall	.-78     	; 0x52c <write_cmd>
 57a:	80 e8       	ldi	r24, 0x80	; 128
 57c:	d7 df       	rcall	.-82     	; 0x52c <write_cmd>
 57e:	80 e4       	ldi	r24, 0x40	; 64
 580:	d5 df       	rcall	.-86     	; 0x52c <write_cmd>
 582:	c8 ef       	ldi	r28, 0xF8	; 248
 584:	d1 e0       	ldi	r29, 0x01	; 1
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	b2 df       	rcall	.-156    	; 0x4f0 <write>
 58c:	21 97       	sbiw	r28, 0x01	; 1
 58e:	d9 f7       	brne	.-10     	; 0x586 <nokia_lcd_init+0x54>
 590:	88 e0       	ldi	r24, 0x08	; 8
 592:	cc df       	rcall	.-104    	; 0x52c <write_cmd>
 594:	8c e0       	ldi	r24, 0x0C	; 12
 596:	ca df       	rcall	.-108    	; 0x52c <write_cmd>
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <nokia_lcd_clear>:
 59e:	80 e8       	ldi	r24, 0x80	; 128
 5a0:	c5 df       	rcall	.-118    	; 0x52c <write_cmd>
 5a2:	80 e4       	ldi	r24, 0x40	; 64
 5a4:	c3 df       	rcall	.-122    	; 0x52c <write_cmd>
 5a6:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <__data_end+0x1f9>
 5aa:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <__data_end+0x1f8>
 5ae:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <__data_end+0x1fb>
 5b2:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <__data_end+0x1fa>
 5b6:	ee e2       	ldi	r30, 0x2E	; 46
 5b8:	f1 e0       	ldi	r31, 0x01	; 1
 5ba:	86 e2       	ldi	r24, 0x26	; 38
 5bc:	93 e0       	ldi	r25, 0x03	; 3
 5be:	11 92       	st	Z+, r1
 5c0:	e8 17       	cp	r30, r24
 5c2:	f9 07       	cpc	r31, r25
 5c4:	e1 f7       	brne	.-8      	; 0x5be <nokia_lcd_clear+0x20>
 5c6:	08 95       	ret

000005c8 <nokia_lcd_set_pixel>:
 5c8:	fb 01       	movw	r30, r22
 5ca:	f6 95       	lsr	r31
 5cc:	e7 95       	ror	r30
 5ce:	f6 95       	lsr	r31
 5d0:	e7 95       	ror	r30
 5d2:	f6 95       	lsr	r31
 5d4:	e7 95       	ror	r30
 5d6:	54 e5       	ldi	r21, 0x54	; 84
 5d8:	5e 9f       	mul	r21, r30
 5da:	90 01       	movw	r18, r0
 5dc:	5f 9f       	mul	r21, r31
 5de:	30 0d       	add	r19, r0
 5e0:	11 24       	eor	r1, r1
 5e2:	82 0f       	add	r24, r18
 5e4:	93 1f       	adc	r25, r19
 5e6:	44 23       	and	r20, r20
 5e8:	81 f0       	breq	.+32     	; 0x60a <nokia_lcd_set_pixel+0x42>
 5ea:	fc 01       	movw	r30, r24
 5ec:	e2 5d       	subi	r30, 0xD2	; 210
 5ee:	fe 4f       	sbci	r31, 0xFE	; 254
 5f0:	67 70       	andi	r22, 0x07	; 7
 5f2:	77 27       	eor	r23, r23
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <nokia_lcd_set_pixel+0x36>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	6a 95       	dec	r22
 600:	e2 f7       	brpl	.-8      	; 0x5fa <nokia_lcd_set_pixel+0x32>
 602:	90 81       	ld	r25, Z
 604:	89 2b       	or	r24, r25
 606:	80 83       	st	Z, r24
 608:	08 95       	ret
 60a:	fc 01       	movw	r30, r24
 60c:	e2 5d       	subi	r30, 0xD2	; 210
 60e:	fe 4f       	sbci	r31, 0xFE	; 254
 610:	67 70       	andi	r22, 0x07	; 7
 612:	77 27       	eor	r23, r23
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	02 c0       	rjmp	.+4      	; 0x61e <nokia_lcd_set_pixel+0x56>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	6a 95       	dec	r22
 620:	e2 f7       	brpl	.-8      	; 0x61a <nokia_lcd_set_pixel+0x52>
 622:	80 95       	com	r24
 624:	90 81       	ld	r25, Z
 626:	89 23       	and	r24, r25
 628:	80 83       	st	Z, r24
 62a:	08 95       	ret

0000062c <nokia_lcd_write_square>:
 62c:	2f 92       	push	r2
 62e:	3f 92       	push	r3
 630:	4f 92       	push	r4
 632:	5f 92       	push	r5
 634:	6f 92       	push	r6
 636:	7f 92       	push	r7
 638:	8f 92       	push	r8
 63a:	9f 92       	push	r9
 63c:	af 92       	push	r10
 63e:	bf 92       	push	r11
 640:	cf 92       	push	r12
 642:	df 92       	push	r13
 644:	ef 92       	push	r14
 646:	ff 92       	push	r15
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	cd b7       	in	r28, 0x3d	; 61
 652:	de b7       	in	r29, 0x3e	; 62
 654:	27 97       	sbiw	r28, 0x07	; 7
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	f8 94       	cli
 65a:	de bf       	out	0x3e, r29	; 62
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	cd bf       	out	0x3d, r28	; 61
 660:	49 83       	std	Y+1, r20	; 0x01
 662:	26 2f       	mov	r18, r22
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	3d 83       	std	Y+5, r19	; 0x05
 668:	2c 83       	std	Y+4, r18	; 0x04
 66a:	39 01       	movw	r6, r18
 66c:	33 e0       	ldi	r19, 0x03	; 3
 66e:	63 1a       	sub	r6, r19
 670:	71 08       	sbc	r7, r1
 672:	0c 81       	ldd	r16, Y+4	; 0x04
 674:	1d 81       	ldd	r17, Y+5	; 0x05
 676:	e8 2e       	mov	r14, r24
 678:	f1 2c       	mov	r15, r1
 67a:	67 01       	movw	r12, r14
 67c:	83 e0       	ldi	r24, 0x03	; 3
 67e:	c8 0e       	add	r12, r24
 680:	d1 1c       	adc	r13, r1
 682:	58 01       	movw	r10, r16
 684:	3e 2c       	mov	r3, r14
 686:	2f 2c       	mov	r2, r15
 688:	12 c0       	rjmp	.+36     	; 0x6ae <nokia_lcd_write_square+0x82>
 68a:	45 01       	movw	r8, r10
 68c:	3e 82       	std	Y+6, r3	; 0x06
 68e:	2f 82       	std	Y+7, r2	; 0x07
 690:	41 e0       	ldi	r20, 0x01	; 1
 692:	b8 01       	movw	r22, r16
 694:	c2 01       	movw	r24, r4
 696:	98 df       	rcall	.-208    	; 0x5c8 <nokia_lcd_set_pixel>
 698:	9f ef       	ldi	r25, 0xFF	; 255
 69a:	49 1a       	sub	r4, r25
 69c:	59 0a       	sbc	r5, r25
 69e:	c4 14       	cp	r12, r4
 6a0:	d5 04       	cpc	r13, r5
 6a2:	99 f7       	brne	.-26     	; 0x68a <nokia_lcd_write_square+0x5e>
 6a4:	01 50       	subi	r16, 0x01	; 1
 6a6:	11 09       	sbc	r17, r1
 6a8:	60 16       	cp	r6, r16
 6aa:	71 06       	cpc	r7, r17
 6ac:	21 f0       	breq	.+8      	; 0x6b6 <nokia_lcd_write_square+0x8a>
 6ae:	ea 82       	std	Y+2, r14	; 0x02
 6b0:	fb 82       	std	Y+3, r15	; 0x03
 6b2:	27 01       	movw	r4, r14
 6b4:	ea cf       	rjmp	.-44     	; 0x68a <nokia_lcd_write_square+0x5e>
 6b6:	49 81       	ldd	r20, Y+1	; 0x01
 6b8:	6c 81       	ldd	r22, Y+4	; 0x04
 6ba:	7d 81       	ldd	r23, Y+5	; 0x05
 6bc:	8a 81       	ldd	r24, Y+2	; 0x02
 6be:	9b 81       	ldd	r25, Y+3	; 0x03
 6c0:	83 df       	rcall	.-250    	; 0x5c8 <nokia_lcd_set_pixel>
 6c2:	0e 81       	ldd	r16, Y+6	; 0x06
 6c4:	1f 81       	ldd	r17, Y+7	; 0x07
 6c6:	0f 5f       	subi	r16, 0xFF	; 255
 6c8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ca:	49 81       	ldd	r20, Y+1	; 0x01
 6cc:	6c 81       	ldd	r22, Y+4	; 0x04
 6ce:	7d 81       	ldd	r23, Y+5	; 0x05
 6d0:	c8 01       	movw	r24, r16
 6d2:	7a df       	rcall	.-268    	; 0x5c8 <nokia_lcd_set_pixel>
 6d4:	2e 81       	ldd	r18, Y+6	; 0x06
 6d6:	3f 81       	ldd	r19, Y+7	; 0x07
 6d8:	21 50       	subi	r18, 0x01	; 1
 6da:	31 09       	sbc	r19, r1
 6dc:	3f 83       	std	Y+7, r19	; 0x07
 6de:	2e 83       	std	Y+6, r18	; 0x06
 6e0:	49 81       	ldd	r20, Y+1	; 0x01
 6e2:	6c 81       	ldd	r22, Y+4	; 0x04
 6e4:	7d 81       	ldd	r23, Y+5	; 0x05
 6e6:	c9 01       	movw	r24, r18
 6e8:	6f df       	rcall	.-290    	; 0x5c8 <nokia_lcd_set_pixel>
 6ea:	75 01       	movw	r14, r10
 6ec:	31 e0       	ldi	r19, 0x01	; 1
 6ee:	e3 1a       	sub	r14, r19
 6f0:	f1 08       	sbc	r15, r1
 6f2:	49 81       	ldd	r20, Y+1	; 0x01
 6f4:	b7 01       	movw	r22, r14
 6f6:	8a 81       	ldd	r24, Y+2	; 0x02
 6f8:	9b 81       	ldd	r25, Y+3	; 0x03
 6fa:	66 df       	rcall	.-308    	; 0x5c8 <nokia_lcd_set_pixel>
 6fc:	49 81       	ldd	r20, Y+1	; 0x01
 6fe:	b7 01       	movw	r22, r14
 700:	8e 81       	ldd	r24, Y+6	; 0x06
 702:	9f 81       	ldd	r25, Y+7	; 0x07
 704:	61 df       	rcall	.-318    	; 0x5c8 <nokia_lcd_set_pixel>
 706:	49 81       	ldd	r20, Y+1	; 0x01
 708:	b7 01       	movw	r22, r14
 70a:	c8 01       	movw	r24, r16
 70c:	5d df       	rcall	.-326    	; 0x5c8 <nokia_lcd_set_pixel>
 70e:	8f ef       	ldi	r24, 0xFF	; 255
 710:	88 1a       	sub	r8, r24
 712:	98 0a       	sbc	r9, r24
 714:	49 81       	ldd	r20, Y+1	; 0x01
 716:	b4 01       	movw	r22, r8
 718:	8a 81       	ldd	r24, Y+2	; 0x02
 71a:	9b 81       	ldd	r25, Y+3	; 0x03
 71c:	55 df       	rcall	.-342    	; 0x5c8 <nokia_lcd_set_pixel>
 71e:	49 81       	ldd	r20, Y+1	; 0x01
 720:	b4 01       	movw	r22, r8
 722:	8e 81       	ldd	r24, Y+6	; 0x06
 724:	9f 81       	ldd	r25, Y+7	; 0x07
 726:	50 df       	rcall	.-352    	; 0x5c8 <nokia_lcd_set_pixel>
 728:	49 81       	ldd	r20, Y+1	; 0x01
 72a:	b4 01       	movw	r22, r8
 72c:	c8 01       	movw	r24, r16
 72e:	4c df       	rcall	.-360    	; 0x5c8 <nokia_lcd_set_pixel>
 730:	27 96       	adiw	r28, 0x07	; 7
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	f8 94       	cli
 736:	de bf       	out	0x3e, r29	; 62
 738:	0f be       	out	0x3f, r0	; 63
 73a:	cd bf       	out	0x3d, r28	; 61
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	1f 91       	pop	r17
 742:	0f 91       	pop	r16
 744:	ff 90       	pop	r15
 746:	ef 90       	pop	r14
 748:	df 90       	pop	r13
 74a:	cf 90       	pop	r12
 74c:	bf 90       	pop	r11
 74e:	af 90       	pop	r10
 750:	9f 90       	pop	r9
 752:	8f 90       	pop	r8
 754:	7f 90       	pop	r7
 756:	6f 90       	pop	r6
 758:	5f 90       	pop	r5
 75a:	4f 90       	pop	r4
 75c:	3f 90       	pop	r3
 75e:	2f 90       	pop	r2
 760:	08 95       	ret

00000762 <nokia_lcd_write_food>:
 762:	ff 92       	push	r15
 764:	0f 93       	push	r16
 766:	1f 93       	push	r17
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
 76c:	f4 2e       	mov	r15, r20
 76e:	c6 2f       	mov	r28, r22
 770:	d0 e0       	ldi	r29, 0x00	; 0
 772:	08 2f       	mov	r16, r24
 774:	10 e0       	ldi	r17, 0x00	; 0
 776:	be 01       	movw	r22, r28
 778:	c8 01       	movw	r24, r16
 77a:	01 96       	adiw	r24, 0x01	; 1
 77c:	25 df       	rcall	.-438    	; 0x5c8 <nokia_lcd_set_pixel>
 77e:	4f 2d       	mov	r20, r15
 780:	be 01       	movw	r22, r28
 782:	c8 01       	movw	r24, r16
 784:	01 97       	sbiw	r24, 0x01	; 1
 786:	20 df       	rcall	.-448    	; 0x5c8 <nokia_lcd_set_pixel>
 788:	be 01       	movw	r22, r28
 78a:	61 50       	subi	r22, 0x01	; 1
 78c:	71 09       	sbc	r23, r1
 78e:	4f 2d       	mov	r20, r15
 790:	c8 01       	movw	r24, r16
 792:	1a df       	rcall	.-460    	; 0x5c8 <nokia_lcd_set_pixel>
 794:	be 01       	movw	r22, r28
 796:	6f 5f       	subi	r22, 0xFF	; 255
 798:	7f 4f       	sbci	r23, 0xFF	; 255
 79a:	4f 2d       	mov	r20, r15
 79c:	c8 01       	movw	r24, r16
 79e:	14 df       	rcall	.-472    	; 0x5c8 <nokia_lcd_set_pixel>
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	1f 91       	pop	r17
 7a6:	0f 91       	pop	r16
 7a8:	ff 90       	pop	r15
 7aa:	08 95       	ret

000007ac <nokia_lcd_draw>:
 7ac:	af 92       	push	r10
 7ae:	bf 92       	push	r11
 7b0:	cf 92       	push	r12
 7b2:	df 92       	push	r13
 7b4:	ef 92       	push	r14
 7b6:	ff 92       	push	r15
 7b8:	0f 93       	push	r16
 7ba:	1f 93       	push	r17
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
 7c0:	00 e0       	ldi	r16, 0x00	; 0
 7c2:	10 e0       	ldi	r17, 0x00	; 0
 7c4:	0f 2e       	mov	r0, r31
 7c6:	f8 e2       	ldi	r31, 0x28	; 40
 7c8:	af 2e       	mov	r10, r31
 7ca:	f3 e0       	ldi	r31, 0x03	; 3
 7cc:	bf 2e       	mov	r11, r31
 7ce:	f0 2d       	mov	r31, r0
 7d0:	0f 2e       	mov	r0, r31
 7d2:	f6 e2       	ldi	r31, 0x26	; 38
 7d4:	cf 2e       	mov	r12, r31
 7d6:	f3 e0       	ldi	r31, 0x03	; 3
 7d8:	df 2e       	mov	r13, r31
 7da:	f0 2d       	mov	r31, r0
 7dc:	2e c0       	rjmp	.+92     	; 0x83a <nokia_lcd_draw+0x8e>
 7de:	f7 01       	movw	r30, r14
 7e0:	84 91       	lpm	r24, Z
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0c 2e       	mov	r0, r28
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <nokia_lcd_draw+0x40>
 7e8:	95 95       	asr	r25
 7ea:	87 95       	ror	r24
 7ec:	0a 94       	dec	r0
 7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <nokia_lcd_draw+0x3c>
 7f0:	80 ff       	sbrs	r24, 0
 7f2:	0d c0       	rjmp	.+26     	; 0x80e <nokia_lcd_draw+0x62>
 7f4:	f5 01       	movw	r30, r10
 7f6:	60 81       	ld	r22, Z
 7f8:	71 81       	ldd	r23, Z+1	; 0x01
 7fa:	6c 0f       	add	r22, r28
 7fc:	7d 1f       	adc	r23, r29
 7fe:	f6 01       	movw	r30, r12
 800:	80 81       	ld	r24, Z
 802:	91 81       	ldd	r25, Z+1	; 0x01
 804:	41 e0       	ldi	r20, 0x01	; 1
 806:	80 0f       	add	r24, r16
 808:	91 1f       	adc	r25, r17
 80a:	de de       	rcall	.-580    	; 0x5c8 <nokia_lcd_set_pixel>
 80c:	0c c0       	rjmp	.+24     	; 0x826 <nokia_lcd_draw+0x7a>
 80e:	f5 01       	movw	r30, r10
 810:	60 81       	ld	r22, Z
 812:	71 81       	ldd	r23, Z+1	; 0x01
 814:	6c 0f       	add	r22, r28
 816:	7d 1f       	adc	r23, r29
 818:	f6 01       	movw	r30, r12
 81a:	80 81       	ld	r24, Z
 81c:	91 81       	ldd	r25, Z+1	; 0x01
 81e:	40 e0       	ldi	r20, 0x00	; 0
 820:	80 0f       	add	r24, r16
 822:	91 1f       	adc	r25, r17
 824:	d1 de       	rcall	.-606    	; 0x5c8 <nokia_lcd_set_pixel>
 826:	21 96       	adiw	r28, 0x01	; 1
 828:	c8 30       	cpi	r28, 0x08	; 8
 82a:	d1 05       	cpc	r29, r1
 82c:	c1 f6       	brne	.-80     	; 0x7de <nokia_lcd_draw+0x32>
 82e:	0f 5f       	subi	r16, 0xFF	; 255
 830:	1f 4f       	sbci	r17, 0xFF	; 255
 832:	08 3f       	cpi	r16, 0xF8	; 248
 834:	f1 e0       	ldi	r31, 0x01	; 1
 836:	1f 07       	cpc	r17, r31
 838:	39 f0       	breq	.+14     	; 0x848 <nokia_lcd_draw+0x9c>
 83a:	c0 e0       	ldi	r28, 0x00	; 0
 83c:	d0 e0       	ldi	r29, 0x00	; 0
 83e:	c8 01       	movw	r24, r16
 840:	84 57       	subi	r24, 0x74	; 116
 842:	9f 4f       	sbci	r25, 0xFF	; 255
 844:	7c 01       	movw	r14, r24
 846:	cb cf       	rjmp	.-106    	; 0x7de <nokia_lcd_draw+0x32>
 848:	df 91       	pop	r29
 84a:	cf 91       	pop	r28
 84c:	1f 91       	pop	r17
 84e:	0f 91       	pop	r16
 850:	ff 90       	pop	r15
 852:	ef 90       	pop	r14
 854:	df 90       	pop	r13
 856:	cf 90       	pop	r12
 858:	bf 90       	pop	r11
 85a:	af 90       	pop	r10
 85c:	08 95       	ret

0000085e <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
 85e:	0f 93       	push	r16
 860:	1f 93       	push	r17
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
 866:	80 e8       	ldi	r24, 0x80	; 128
 868:	61 de       	rcall	.-830    	; 0x52c <write_cmd>
	write_cmd(0x40);
 86a:	80 e4       	ldi	r24, 0x40	; 64
 86c:	5f de       	rcall	.-834    	; 0x52c <write_cmd>
 86e:	ce e2       	ldi	r28, 0x2E	; 46
 870:	d1 e0       	ldi	r29, 0x01	; 1
 872:	06 e2       	ldi	r16, 0x26	; 38
 874:	13 e0       	ldi	r17, 0x03	; 3
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
 876:	61 e0       	ldi	r22, 0x01	; 1
 878:	89 91       	ld	r24, Y+
 87a:	3a de       	rcall	.-908    	; 0x4f0 <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
 87c:	c0 17       	cp	r28, r16
 87e:	d1 07       	cpc	r29, r17
 880:	d1 f7       	brne	.-12     	; 0x876 <nokia_lcd_render+0x18>
		write_data(nokia_lcd.screen[i]);
}
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	1f 91       	pop	r17
 888:	0f 91       	pop	r16
 88a:	08 95       	ret

0000088c <init_snake>:
	snakes(3);

}

void init_snake(void)
{
 88c:	cf 93       	push	r28
 88e:	df 93       	push	r29

	snakes(0)->speed = ram_cfg.speed;
 890:	ea e3       	ldi	r30, 0x3A	; 58
 892:	f3 e0       	ldi	r31, 0x03	; 3
 894:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <ram_cfg+0x1>
 898:	80 83       	st	Z, r24
	snakes(0)->byx[0] = (42<<8) + 2; // start position at X = 6, Y = 4;
 89a:	82 e0       	ldi	r24, 0x02	; 2
 89c:	9a e2       	ldi	r25, 0x2A	; 42
 89e:	93 87       	std	Z+11, r25	; 0x0b
 8a0:	82 87       	std	Z+10, r24	; 0x0a
	snakes(0)->body_len = 10;
 8a2:	8a e0       	ldi	r24, 0x0A	; 10
 8a4:	80 87       	std	Z+8, r24	; 0x08
	snakes(0)->direction = right;
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	87 83       	std	Z+7, r24	; 0x07
	snakes(0)->draw_snake_fun = (void*)draw_snake;
 8aa:	84 e3       	ldi	r24, 0x34	; 52
 8ac:	95 e0       	ldi	r25, 0x05	; 5
 8ae:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <snake_tab+0x40b>
 8b2:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <snake_tab+0x40a>
	snakes(0)->head = 0;
 8b6:	11 86       	std	Z+9, r1	; 0x09
	snakes(0)->points = 0;
 8b8:	11 82       	std	Z+1, r1	; 0x01

	food[0] = yy[random() % 14];
 8ba:	2d d2       	rcall	.+1114   	; 0xd16 <random>
 8bc:	c8 e3       	ldi	r28, 0x38	; 56
 8be:	d3 e0       	ldi	r29, 0x03	; 3
 8c0:	2e e0       	ldi	r18, 0x0E	; 14
 8c2:	30 e0       	ldi	r19, 0x00	; 0
 8c4:	40 e0       	ldi	r20, 0x00	; 0
 8c6:	50 e0       	ldi	r21, 0x00	; 0
 8c8:	a0 d1       	rcall	.+832    	; 0xc0a <__divmodsi4>
 8ca:	fb 01       	movw	r30, r22
 8cc:	ec 5f       	subi	r30, 0xFC	; 252
 8ce:	fe 4f       	sbci	r31, 0xFE	; 254
 8d0:	80 81       	ld	r24, Z
 8d2:	88 83       	st	Y, r24
	food[1] = xx[random() % 27];
 8d4:	20 d2       	rcall	.+1088   	; 0xd16 <random>
 8d6:	2b e1       	ldi	r18, 0x1B	; 27
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	40 e0       	ldi	r20, 0x00	; 0
 8dc:	50 e0       	ldi	r21, 0x00	; 0
 8de:	95 d1       	rcall	.+810    	; 0xc0a <__divmodsi4>
 8e0:	fb 01       	movw	r30, r22
 8e2:	ee 5e       	subi	r30, 0xEE	; 238
 8e4:	fe 4f       	sbci	r31, 0xFE	; 254
 8e6:	80 81       	ld	r24, Z
 8e8:	89 83       	std	Y+1, r24	; 0x01
	nokia_lcd_write_food(food[1], food[0], 1);
 8ea:	41 e0       	ldi	r20, 0x01	; 1
 8ec:	68 81       	ld	r22, Y
 8ee:	39 df       	rcall	.-398    	; 0x762 <nokia_lcd_write_food>
 8f0:	df 91       	pop	r29


	//if(start_screen_callback) start_screen_callback(snake_cnt); //

}
 8f2:	cf 91       	pop	r28
 8f4:	08 95       	ret

000008f6 <snake_init>:
 8f6:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <snake_cnt>


TSNAKE * snakes(unsigned char n)
{

	if(n == 3) init_snake();
 8fa:	c8 cf       	rjmp	.-112    	; 0x88c <init_snake>
 8fc:	08 95       	ret

000008fe <snakes>:

}


TSNAKE * snakes(unsigned char n)
{
 8fe:	cf 93       	push	r28
 900:	c8 2f       	mov	r28, r24

	if(n == 3) init_snake();
 902:	83 30       	cpi	r24, 0x03	; 3
 904:	09 f4       	brne	.+2      	; 0x908 <snakes+0xa>
 906:	c2 df       	rcall	.-124    	; 0x88c <init_snake>

	return &snake_tab[n];
 908:	2c e0       	ldi	r18, 0x0C	; 12
 90a:	34 e0       	ldi	r19, 0x04	; 4
 90c:	c2 9f       	mul	r28, r18
 90e:	c0 01       	movw	r24, r0
 910:	c3 9f       	mul	r28, r19
 912:	90 0d       	add	r25, r0
 914:	11 24       	eor	r1, r1
}
 916:	86 5c       	subi	r24, 0xC6	; 198
 918:	9c 4f       	sbci	r25, 0xFC	; 252
 91a:	cf 91       	pop	r28
 91c:	08 95       	ret

0000091e <check_body>:


unsigned char check_body(TSNAKE * tsn, unsigned char y, unsigned char x)
{
 91e:	cf 93       	push	r28
 920:	df 93       	push	r29
 922:	dc 01       	movw	r26, r24

	unsigned char i;
	unsigned char head = tsn->head;
 924:	19 96       	adiw	r26, 0x09	; 9
 926:	9c 91       	ld	r25, X
 928:	19 97       	sbiw	r26, 0x09	; 9

	if(tsn->body_len == 1) return 0;
 92a:	18 96       	adiw	r26, 0x08	; 8
 92c:	8c 91       	ld	r24, X
 92e:	18 97       	sbiw	r26, 0x08	; 8

	for(i = 0; i<tsn->body_len; i++)
 930:	82 30       	cpi	r24, 0x02	; 2
 932:	d0 f0       	brcs	.+52     	; 0x968 <check_body+0x4a>
 934:	29 2f       	mov	r18, r25
 936:	28 1b       	sub	r18, r24
 938:	82 2f       	mov	r24, r18
	{
		if( x == get_x(tsn->byx[head]) && y == get_y(tsn->byx[head])) return 1;
 93a:	70 e0       	ldi	r23, 0x00	; 0
 93c:	e9 2f       	mov	r30, r25
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	35 96       	adiw	r30, 0x05	; 5
 942:	ee 0f       	add	r30, r30
 944:	ff 1f       	adc	r31, r31
 946:	ea 0f       	add	r30, r26
 948:	fb 1f       	adc	r31, r27
 94a:	20 81       	ld	r18, Z
 94c:	31 81       	ldd	r19, Z+1	; 0x01
 94e:	42 13       	cpse	r20, r18
 950:	06 c0       	rjmp	.+12     	; 0x95e <check_body+0x40>
 952:	c3 2f       	mov	r28, r19
 954:	20 e0       	ldi	r18, 0x00	; 0
 956:	d2 2f       	mov	r29, r18
 958:	6c 17       	cp	r22, r28
 95a:	7d 07       	cpc	r23, r29
 95c:	39 f0       	breq	.+14     	; 0x96c <check_body+0x4e>
			head = (head - 1) & 511;
 95e:	91 50       	subi	r25, 0x01	; 1
	unsigned char i;
	unsigned char head = tsn->head;

	if(tsn->body_len == 1) return 0;

	for(i = 0; i<tsn->body_len; i++)
 960:	89 13       	cpse	r24, r25
 962:	ec cf       	rjmp	.-40     	; 0x93c <check_body+0x1e>
	{
		if( x == get_x(tsn->byx[head]) && y == get_y(tsn->byx[head])) return 1;
			head = (head - 1) & 511;
	}
	return 0;
 964:	80 e0       	ldi	r24, 0x00	; 0
 966:	03 c0       	rjmp	.+6      	; 0x96e <check_body+0x50>
 968:	80 e0       	ldi	r24, 0x00	; 0
 96a:	01 c0       	rjmp	.+2      	; 0x96e <check_body+0x50>

	if(tsn->body_len == 1) return 0;

	for(i = 0; i<tsn->body_len; i++)
	{
		if( x == get_x(tsn->byx[head]) && y == get_y(tsn->byx[head])) return 1;
 96c:	81 e0       	ldi	r24, 0x01	; 1
			head = (head - 1) & 511;
	}
	return 0;
}
 96e:	df 91       	pop	r29
 970:	cf 91       	pop	r28
 972:	08 95       	ret

00000974 <check_error>:

unsigned char check_error(TSNAKE * tsn, unsigned char y, unsigned char x)
{
 974:	6f 92       	push	r6
 976:	7f 92       	push	r7
 978:	8f 92       	push	r8
 97a:	9f 92       	push	r9
 97c:	af 92       	push	r10
 97e:	bf 92       	push	r11
 980:	cf 92       	push	r12
 982:	df 92       	push	r13
 984:	ef 92       	push	r14
 986:	ff 92       	push	r15
 988:	0f 93       	push	r16
 98a:	1f 93       	push	r17
 98c:	cf 93       	push	r28
 98e:	df 93       	push	r29
 990:	8c 01       	movw	r16, r24
		
		unsigned char y1 = 0, x1 = 0;

		if(y == food[0] && x == food[1]) {
 992:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <food>
 996:	86 13       	cpse	r24, r22
 998:	3a c0       	rjmp	.+116    	; 0xa0e <check_error+0x9a>
 99a:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <food+0x1>
 99e:	84 13       	cpse	r24, r20
 9a0:	36 c0       	rjmp	.+108    	; 0xa0e <check_error+0x9a>
			while(1){

				y1 = yy[random() % 14];
 9a2:	0f 2e       	mov	r0, r31
 9a4:	fe e0       	ldi	r31, 0x0E	; 14
 9a6:	8f 2e       	mov	r8, r31
 9a8:	91 2c       	mov	r9, r1
 9aa:	a1 2c       	mov	r10, r1
 9ac:	b1 2c       	mov	r11, r1
 9ae:	f0 2d       	mov	r31, r0
				x1 = xx[random() % 27];
 9b0:	0f 2e       	mov	r0, r31
 9b2:	fb e1       	ldi	r31, 0x1B	; 27
 9b4:	cf 2e       	mov	r12, r31
 9b6:	d1 2c       	mov	r13, r1
 9b8:	e1 2c       	mov	r14, r1
 9ba:	f1 2c       	mov	r15, r1
 9bc:	f0 2d       	mov	r31, r0

				if(y1 == food[0] && x1 == food[1]) continue;
 9be:	c8 e3       	ldi	r28, 0x38	; 56
 9c0:	d3 e0       	ldi	r29, 0x03	; 3
		unsigned char y1 = 0, x1 = 0;

		if(y == food[0] && x == food[1]) {
			while(1){

				y1 = yy[random() % 14];
 9c2:	a9 d1       	rcall	.+850    	; 0xd16 <random>
 9c4:	a5 01       	movw	r20, r10
 9c6:	94 01       	movw	r18, r8
 9c8:	20 d1       	rcall	.+576    	; 0xc0a <__divmodsi4>
 9ca:	fb 01       	movw	r30, r22
 9cc:	ec 5f       	subi	r30, 0xFC	; 252
 9ce:	fe 4f       	sbci	r31, 0xFE	; 254
 9d0:	70 80       	ld	r7, Z
				x1 = xx[random() % 27];
 9d2:	a1 d1       	rcall	.+834    	; 0xd16 <random>
 9d4:	a7 01       	movw	r20, r14
 9d6:	96 01       	movw	r18, r12
 9d8:	18 d1       	rcall	.+560    	; 0xc0a <__divmodsi4>
 9da:	fb 01       	movw	r30, r22
 9dc:	ee 5e       	subi	r30, 0xEE	; 238
 9de:	fe 4f       	sbci	r31, 0xFE	; 254
 9e0:	60 80       	ld	r6, Z
 9e2:	88 81       	ld	r24, Y

				if(y1 == food[0] && x1 == food[1]) continue;
 9e4:	78 12       	cpse	r7, r24
 9e6:	03 c0       	rjmp	.+6      	; 0x9ee <check_error+0x7a>
 9e8:	89 81       	ldd	r24, Y+1	; 0x01
 9ea:	68 16       	cp	r6, r24
 9ec:	51 f3       	breq	.-44     	; 0x9c2 <check_error+0x4e>

				if(!check_body(tsn, y1, x1)) break;
 9ee:	46 2d       	mov	r20, r6
 9f0:	67 2d       	mov	r22, r7
 9f2:	c8 01       	movw	r24, r16
 9f4:	94 df       	rcall	.-216    	; 0x91e <check_body>
 9f6:	81 11       	cpse	r24, r1
 9f8:	e4 cf       	rjmp	.-56     	; 0x9c2 <check_error+0x4e>
 9fa:	e8 e3       	ldi	r30, 0x38	; 56
			}

			food[0] = y1;
 9fc:	f3 e0       	ldi	r31, 0x03	; 3
 9fe:	70 82       	st	Z, r7
 a00:	61 82       	std	Z+1, r6	; 0x01
			food[1] = x1;
 a02:	f8 01       	movw	r30, r16
			tsn->points++;
 a04:	81 81       	ldd	r24, Z+1	; 0x01
 a06:	8f 5f       	subi	r24, 0xFF	; 255
 a08:	81 83       	std	Z+1, r24	; 0x01
 a0a:	82 e0       	ldi	r24, 0x02	; 2
			return 2;
 a0c:	0e c0       	rjmp	.+28     	; 0xa2a <check_error+0xb6>
 a0e:	8d ef       	ldi	r24, 0xFD	; 253
		}

		if(y > 44 || y < 3) return 1;
 a10:	86 0f       	add	r24, r22
 a12:	8a 32       	cpi	r24, 0x2A	; 42
 a14:	38 f4       	brcc	.+14     	; 0xa24 <check_error+0xb0>
 a16:	8e ef       	ldi	r24, 0xFE	; 254
		if(x > 80 || x < 2) return 1;
 a18:	84 0f       	add	r24, r20
 a1a:	8f 34       	cpi	r24, 0x4F	; 79
 a1c:	28 f4       	brcc	.+10     	; 0xa28 <check_error+0xb4>

		return check_body(tsn, y, x);
 a1e:	c8 01       	movw	r24, r16
 a20:	7e df       	rcall	.-260    	; 0x91e <check_body>
 a22:	03 c0       	rjmp	.+6      	; 0xa2a <check_error+0xb6>
 a24:	81 e0       	ldi	r24, 0x01	; 1
			food[1] = x1;
			tsn->points++;
			return 2;
		}

		if(y > 44 || y < 3) return 1;
 a26:	01 c0       	rjmp	.+2      	; 0xa2a <check_error+0xb6>
 a28:	81 e0       	ldi	r24, 0x01	; 1
		if(x > 80 || x < 2) return 1;
 a2a:	df 91       	pop	r29

		return check_body(tsn, y, x);
}
 a2c:	cf 91       	pop	r28
 a2e:	1f 91       	pop	r17
 a30:	0f 91       	pop	r16
 a32:	ff 90       	pop	r15
 a34:	ef 90       	pop	r14
 a36:	df 90       	pop	r13
 a38:	cf 90       	pop	r12
 a3a:	bf 90       	pop	r11
 a3c:	af 90       	pop	r10
 a3e:	9f 90       	pop	r9
 a40:	8f 90       	pop	r8
 a42:	7f 90       	pop	r7
 a44:	6f 90       	pop	r6
 a46:	08 95       	ret

00000a48 <copy_eem_to_ram>:
 a48:	43 e0       	ldi	r20, 0x03	; 3
	nokia_lcd_render();
}

void copy_eem_to_ram(void)
{
	eeprom_read_block( &ram_cfg, &eem_cfg, sizeof(ram_cfg));
 a4a:	50 e0       	ldi	r21, 0x00	; 0
 a4c:	67 e4       	ldi	r22, 0x47	; 71
 a4e:	77 e0       	ldi	r23, 0x07	; 7
 a50:	8a e4       	ldi	r24, 0x4A	; 74
 a52:	97 e0       	ldi	r25, 0x07	; 7
 a54:	bd c1       	rjmp	.+890    	; 0xdd0 <eeprom_read_block>
 a56:	08 95       	ret

00000a58 <copy_ram_to_eem>:
}

void copy_ram_to_eem(void)
{
	eeprom_write_block(&ram_cfg, &eem_cfg, sizeof(ram_cfg));
 a58:	43 e0       	ldi	r20, 0x03	; 3
 a5a:	50 e0       	ldi	r21, 0x00	; 0
 a5c:	67 e4       	ldi	r22, 0x47	; 71
 a5e:	77 e0       	ldi	r23, 0x07	; 7
 a60:	8a e4       	ldi	r24, 0x4A	; 74
 a62:	97 e0       	ldi	r25, 0x07	; 7
 a64:	c5 c1       	rjmp	.+906    	; 0xdf0 <eeprom_write_block>
 a66:	08 95       	ret

00000a68 <draw_snake>:
		return check_body(tsn, y, x);
}

// Orientation of the snake
void draw_snake(TSNAKE * tsn)
{
 a68:	ef 92       	push	r14
 a6a:	ff 92       	push	r15
 a6c:	0f 93       	push	r16
 a6e:	1f 93       	push	r17
 a70:	cf 93       	push	r28
 a72:	df 93       	push	r29
 a74:	8c 01       	movw	r16, r24

	unsigned char head = tsn->head, tail = 0;
 a76:	fc 01       	movw	r30, r24
 a78:	c1 85       	ldd	r28, Z+9	; 0x09
	unsigned char x = get_x(tsn->byx[head]);
 a7a:	ec 2f       	mov	r30, r28
 a7c:	f0 e0       	ldi	r31, 0x00	; 0
 a7e:	35 96       	adiw	r30, 0x05	; 5
 a80:	ee 0f       	add	r30, r30
 a82:	ff 1f       	adc	r31, r31
 a84:	e8 0f       	add	r30, r24
 a86:	f9 1f       	adc	r31, r25
 a88:	90 81       	ld	r25, Z
 a8a:	81 81       	ldd	r24, Z+1	; 0x01
 a8c:	f9 2e       	mov	r15, r25
	unsigned char y = get_y(tsn->byx[head]);
 a8e:	d8 2f       	mov	r29, r24

	unsigned char check_result;



	switch(tsn->direction){
 a90:	f8 01       	movw	r30, r16
 a92:	27 81       	ldd	r18, Z+7	; 0x07
 a94:	21 30       	cpi	r18, 0x01	; 1
 a96:	d9 f0       	breq	.+54     	; 0xace <draw_snake+0x66>
 a98:	28 f0       	brcs	.+10     	; 0xaa4 <draw_snake+0x3c>
 a9a:	22 30       	cpi	r18, 0x02	; 2
 a9c:	69 f1       	breq	.+90     	; 0xaf8 <draw_snake+0x90>
 a9e:	23 30       	cpi	r18, 0x03	; 3
 aa0:	c9 f1       	breq	.+114    	; 0xb14 <draw_snake+0xac>
 aa2:	45 c0       	rjmp	.+138    	; 0xb2e <draw_snake+0xc6>
		case left:
			{
				s_direction.leftDirection = 1;
 aa4:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <s_direction>
				s_direction.upDirection = 0;
 aa8:	82 60       	ori	r24, 0x02	; 2
				s_direction.downDirection = 0;
 aaa:	8b 7f       	andi	r24, 0xFB	; 251
 aac:	87 7f       	andi	r24, 0xF7	; 247
 aae:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <s_direction>

				if(s_direction.rightDirection == 0)
 ab2:	80 fd       	sbrc	r24, 0
 ab4:	06 c0       	rjmp	.+12     	; 0xac2 <draw_snake+0x5a>
					x-=3;
 ab6:	0f 2e       	mov	r0, r31
 ab8:	fd ef       	ldi	r31, 0xFD	; 253
 aba:	ff 2e       	mov	r15, r31
 abc:	f0 2d       	mov	r31, r0
 abe:	f9 0e       	add	r15, r25
 ac0:	36 c0       	rjmp	.+108    	; 0xb2e <draw_snake+0xc6>
				else x+=3;
 ac2:	0f 2e       	mov	r0, r31
 ac4:	f3 e0       	ldi	r31, 0x03	; 3
 ac6:	ff 2e       	mov	r15, r31
 ac8:	f0 2d       	mov	r31, r0
 aca:	f9 0e       	add	r15, r25
 acc:	30 c0       	rjmp	.+96     	; 0xb2e <draw_snake+0xc6>
				break;
			}
		case right:
			{
				s_direction.rightDirection = 1;
 ace:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <s_direction>
				s_direction.upDirection = 0;
 ad2:	81 60       	ori	r24, 0x01	; 1
				s_direction.downDirection = 0;
 ad4:	8b 7f       	andi	r24, 0xFB	; 251
 ad6:	87 7f       	andi	r24, 0xF7	; 247
 ad8:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <s_direction>

				if(s_direction.leftDirection == 0)
 adc:	81 fd       	sbrc	r24, 1
 ade:	06 c0       	rjmp	.+12     	; 0xaec <draw_snake+0x84>
					x+=3;
 ae0:	0f 2e       	mov	r0, r31
 ae2:	f3 e0       	ldi	r31, 0x03	; 3
 ae4:	ff 2e       	mov	r15, r31
 ae6:	f0 2d       	mov	r31, r0
 ae8:	f9 0e       	add	r15, r25
 aea:	21 c0       	rjmp	.+66     	; 0xb2e <draw_snake+0xc6>
				else x-=3;
 aec:	0f 2e       	mov	r0, r31
 aee:	fd ef       	ldi	r31, 0xFD	; 253
 af0:	ff 2e       	mov	r15, r31
 af2:	f0 2d       	mov	r31, r0
 af4:	f9 0e       	add	r15, r25
 af6:	1b c0       	rjmp	.+54     	; 0xb2e <draw_snake+0xc6>
				break;
			}
		case up:
			{
				s_direction.rightDirection = 0;
 af8:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <s_direction>
				s_direction.leftDirection = 0;
				s_direction.upDirection = 1;
 afc:	9c 7f       	andi	r25, 0xFC	; 252
 afe:	94 60       	ori	r25, 0x04	; 4
 b00:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <s_direction>

				if(s_direction.downDirection == 0)
 b04:	93 fd       	sbrc	r25, 3
 b06:	03 c0       	rjmp	.+6      	; 0xb0e <draw_snake+0xa6>
					y-=3;
 b08:	dd ef       	ldi	r29, 0xFD	; 253
 b0a:	d8 0f       	add	r29, r24
 b0c:	10 c0       	rjmp	.+32     	; 0xb2e <draw_snake+0xc6>
				else y+=3;
 b0e:	d3 e0       	ldi	r29, 0x03	; 3
 b10:	d8 0f       	add	r29, r24
 b12:	0d c0       	rjmp	.+26     	; 0xb2e <draw_snake+0xc6>
				break;
			}
		case down:
			{
				s_direction.rightDirection = 0;
 b14:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <s_direction>
				s_direction.leftDirection = 0;
				s_direction.downDirection = 1;
 b18:	9c 7f       	andi	r25, 0xFC	; 252
 b1a:	98 60       	ori	r25, 0x08	; 8
 b1c:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <s_direction>

				if(s_direction.upDirection == 0)
 b20:	92 fd       	sbrc	r25, 2
 b22:	03 c0       	rjmp	.+6      	; 0xb2a <draw_snake+0xc2>
					y+=3;
 b24:	d3 e0       	ldi	r29, 0x03	; 3
 b26:	d8 0f       	add	r29, r24
 b28:	02 c0       	rjmp	.+4      	; 0xb2e <draw_snake+0xc6>
				else y-=3;
 b2a:	dd ef       	ldi	r29, 0xFD	; 253
 b2c:	d8 0f       	add	r29, r24
				break;
			}
	}

	check_result = check_error(tsn, y ,x);
 b2e:	4f 2d       	mov	r20, r15
 b30:	6d 2f       	mov	r22, r29
 b32:	c8 01       	movw	r24, r16
 b34:	1f df       	rcall	.-450    	; 0x974 <check_error>
 b36:	e8 2e       	mov	r14, r24

	if(check_result == 1){
 b38:	f1 e0       	ldi	r31, 0x01	; 1
 b3a:	8f 13       	cpse	r24, r31
 b3c:	17 c0       	rjmp	.+46     	; 0xb6c <draw_snake+0x104>

		restart = 0;
 b3e:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <restart>

		tsn->points--;
 b42:	f8 01       	movw	r30, r16
 b44:	81 81       	ldd	r24, Z+1	; 0x01
 b46:	81 50       	subi	r24, 0x01	; 1
 b48:	81 83       	std	Z+1, r24	; 0x01

		if(tsn->points > ram_cfg.max_score) {
 b4a:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <ram_cfg>
 b4e:	98 17       	cp	r25, r24
 b50:	1c f4       	brge	.+6      	; 0xb58 <draw_snake+0xf0>
			ram_cfg.max_score = tsn->points;
 b52:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <ram_cfg>
			copy_ram_to_eem();
 b56:	80 df       	rcall	.-256    	; 0xa58 <copy_ram_to_eem>
		};

		while(1)
		{
			if( restart ) {
 b58:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <restart>
 b5c:	88 23       	and	r24, r24
 b5e:	f1 f3       	breq	.-4      	; 0xb5c <draw_snake+0xf4>
				restart=0;
 b60:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <restart>
				nokia_lcd_init();
				nokia_lcd_clear();
 b64:	e6 dc       	rcall	.-1588   	; 0x532 <nokia_lcd_init>
 b66:	1b dd       	rcall	.-1482   	; 0x59e <nokia_lcd_clear>


TSNAKE * snakes(unsigned char n)
{

	if(n == 3) init_snake();
 b68:	91 de       	rcall	.-734    	; 0x88c <init_snake>
 b6a:	f6 cf       	rjmp	.-20     	; 0xb58 <draw_snake+0xf0>
 b6c:	cf 5f       	subi	r28, 0xFF	; 255
				snakes(3);
			}
		}
	}

	head = (head + 1) & 511;
 b6e:	f8 01       	movw	r30, r16

	tsn->head = head;
 b70:	c1 87       	std	Z+9, r28	; 0x09
 b72:	8f 2d       	mov	r24, r15

	tsn->byx[head] = (y<<8) | x;
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	9d 2b       	or	r25, r29
 b78:	ec 2f       	mov	r30, r28
 b7a:	f0 e0       	ldi	r31, 0x00	; 0
 b7c:	35 96       	adiw	r30, 0x05	; 5
 b7e:	ee 0f       	add	r30, r30
 b80:	ff 1f       	adc	r31, r31
 b82:	e0 0f       	add	r30, r16
 b84:	f1 1f       	adc	r31, r17
 b86:	f0 82       	st	Z, r15
 b88:	91 83       	std	Z+1, r25	; 0x01

	nokia_lcd_write_square(get_x(tsn->byx[head]), get_y(tsn->byx[head]), 1);
 b8a:	41 e0       	ldi	r20, 0x01	; 1
 b8c:	69 2f       	mov	r22, r25
 b8e:	4e dd       	rcall	.-1380   	; 0x62c <nokia_lcd_write_square>
 b90:	f8 01       	movw	r30, r16

	tail = (head - tsn->body_len) & 511;
	nokia_lcd_write_square(get_x(tsn->byx[tail]), get_y(tsn->byx[tail]), 0);
 b92:	80 85       	ldd	r24, Z+8	; 0x08
 b94:	ec 2f       	mov	r30, r28
 b96:	e8 1b       	sub	r30, r24
 b98:	f0 e0       	ldi	r31, 0x00	; 0
 b9a:	35 96       	adiw	r30, 0x05	; 5
 b9c:	ee 0f       	add	r30, r30
 b9e:	ff 1f       	adc	r31, r31
 ba0:	e0 0f       	add	r30, r16
 ba2:	f1 1f       	adc	r31, r17
 ba4:	61 81       	ldd	r22, Z+1	; 0x01
 ba6:	40 e0       	ldi	r20, 0x00	; 0
 ba8:	80 81       	ld	r24, Z
 baa:	40 dd       	rcall	.-1408   	; 0x62c <nokia_lcd_write_square>
 bac:	f2 e0       	ldi	r31, 0x02	; 2

	if(check_result == 2) tsn->body_len++;
 bae:	ef 12       	cpse	r14, r31
 bb0:	04 c0       	rjmp	.+8      	; 0xbba <draw_snake+0x152>
 bb2:	f8 01       	movw	r30, r16
 bb4:	80 85       	ldd	r24, Z+8	; 0x08
 bb6:	8f 5f       	subi	r24, 0xFF	; 255
 bb8:	80 87       	std	Z+8, r24	; 0x08

	nokia_lcd_write_food(food[1], food[0], 1);
 bba:	e8 e3       	ldi	r30, 0x38	; 56
 bbc:	f3 e0       	ldi	r31, 0x03	; 3
 bbe:	41 e0       	ldi	r20, 0x01	; 1
 bc0:	60 81       	ld	r22, Z
 bc2:	81 81       	ldd	r24, Z+1	; 0x01
 bc4:	ce dd       	rcall	.-1124   	; 0x762 <nokia_lcd_write_food>
 bc6:	4b de       	rcall	.-874    	; 0x85e <nokia_lcd_render>
	nokia_lcd_render();
 bc8:	df 91       	pop	r29
 bca:	cf 91       	pop	r28
}
 bcc:	1f 91       	pop	r17
 bce:	0f 91       	pop	r16
 bd0:	ff 90       	pop	r15
 bd2:	ef 90       	pop	r14
 bd4:	08 95       	ret

00000bd6 <copy_pgm_to_ram>:
 bd6:	43 e0       	ldi	r20, 0x03	; 3
 bd8:	50 e0       	ldi	r21, 0x00	; 0
	eeprom_write_block(&ram_cfg, &eem_cfg, sizeof(ram_cfg));
}

void copy_pgm_to_ram(void)
{
	memcpy_P( &ram_cfg, &pgm_cfg, sizeof(ram_cfg));
 bda:	64 e8       	ldi	r22, 0x84	; 132
 bdc:	72 e0       	ldi	r23, 0x02	; 2
 bde:	8a e4       	ldi	r24, 0x4A	; 74
 be0:	97 e0       	ldi	r25, 0x07	; 7
 be2:	ed c0       	rjmp	.+474    	; 0xdbe <memcpy_P>
 be4:	08 95       	ret

00000be6 <load_defaults>:
}

void load_defaults(void)
{
	copy_pgm_to_ram();
 be6:	f7 df       	rcall	.-18     	; 0xbd6 <copy_pgm_to_ram>
	copy_ram_to_eem();
 be8:	37 cf       	rjmp	.-402    	; 0xa58 <copy_ram_to_eem>
 bea:	08 95       	ret

00000bec <check_and_load_defaults>:
 bec:	2d df       	rcall	.-422    	; 0xa48 <copy_eem_to_ram>
	unsigned char i, len = sizeof(ram_cfg);
	unsigned char * ram_ptr = (unsigned char*)&ram_cfg;

	copy_eem_to_ram();
	for(i = 0; i<len; i++){
		if(0xff == *ram_ptr++) continue;
 bee:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <ram_cfg>
 bf2:	8f 3f       	cpi	r24, 0xFF	; 255
 bf4:	49 f4       	brne	.+18     	; 0xc08 <check_and_load_defaults+0x1c>
 bf6:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <ram_cfg+0x1>
 bfa:	8f 3f       	cpi	r24, 0xFF	; 255
 bfc:	29 f4       	brne	.+10     	; 0xc08 <check_and_load_defaults+0x1c>
 bfe:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <ram_cfg+0x2>
 c02:	8f 3f       	cpi	r24, 0xFF	; 255
		break;
	}

	if( i == len){
		load_defaults();
 c04:	09 f4       	brne	.+2      	; 0xc08 <check_and_load_defaults+0x1c>
 c06:	ef cf       	rjmp	.-34     	; 0xbe6 <load_defaults>
 c08:	08 95       	ret

00000c0a <__divmodsi4>:
 c0a:	05 2e       	mov	r0, r21
 c0c:	97 fb       	bst	r25, 7
 c0e:	16 f4       	brtc	.+4      	; 0xc14 <__divmodsi4+0xa>
 c10:	00 94       	com	r0
 c12:	0f d0       	rcall	.+30     	; 0xc32 <__negsi2>
 c14:	57 fd       	sbrc	r21, 7
 c16:	05 d0       	rcall	.+10     	; 0xc22 <__divmodsi4_neg2>
 c18:	14 d0       	rcall	.+40     	; 0xc42 <__udivmodsi4>
 c1a:	07 fc       	sbrc	r0, 7
 c1c:	02 d0       	rcall	.+4      	; 0xc22 <__divmodsi4_neg2>
 c1e:	46 f4       	brtc	.+16     	; 0xc30 <__divmodsi4_exit>
 c20:	08 c0       	rjmp	.+16     	; 0xc32 <__negsi2>

00000c22 <__divmodsi4_neg2>:
 c22:	50 95       	com	r21
 c24:	40 95       	com	r20
 c26:	30 95       	com	r19
 c28:	21 95       	neg	r18
 c2a:	3f 4f       	sbci	r19, 0xFF	; 255
 c2c:	4f 4f       	sbci	r20, 0xFF	; 255
 c2e:	5f 4f       	sbci	r21, 0xFF	; 255

00000c30 <__divmodsi4_exit>:
 c30:	08 95       	ret

00000c32 <__negsi2>:
 c32:	90 95       	com	r25
 c34:	80 95       	com	r24
 c36:	70 95       	com	r23
 c38:	61 95       	neg	r22
 c3a:	7f 4f       	sbci	r23, 0xFF	; 255
 c3c:	8f 4f       	sbci	r24, 0xFF	; 255
 c3e:	9f 4f       	sbci	r25, 0xFF	; 255
 c40:	08 95       	ret

00000c42 <__udivmodsi4>:
 c42:	a1 e2       	ldi	r26, 0x21	; 33
 c44:	1a 2e       	mov	r1, r26
 c46:	aa 1b       	sub	r26, r26
 c48:	bb 1b       	sub	r27, r27
 c4a:	fd 01       	movw	r30, r26
 c4c:	0d c0       	rjmp	.+26     	; 0xc68 <__udivmodsi4_ep>

00000c4e <__udivmodsi4_loop>:
 c4e:	aa 1f       	adc	r26, r26
 c50:	bb 1f       	adc	r27, r27
 c52:	ee 1f       	adc	r30, r30
 c54:	ff 1f       	adc	r31, r31
 c56:	a2 17       	cp	r26, r18
 c58:	b3 07       	cpc	r27, r19
 c5a:	e4 07       	cpc	r30, r20
 c5c:	f5 07       	cpc	r31, r21
 c5e:	20 f0       	brcs	.+8      	; 0xc68 <__udivmodsi4_ep>
 c60:	a2 1b       	sub	r26, r18
 c62:	b3 0b       	sbc	r27, r19
 c64:	e4 0b       	sbc	r30, r20
 c66:	f5 0b       	sbc	r31, r21

00000c68 <__udivmodsi4_ep>:
 c68:	66 1f       	adc	r22, r22
 c6a:	77 1f       	adc	r23, r23
 c6c:	88 1f       	adc	r24, r24
 c6e:	99 1f       	adc	r25, r25
 c70:	1a 94       	dec	r1
 c72:	69 f7       	brne	.-38     	; 0xc4e <__udivmodsi4_loop>
 c74:	60 95       	com	r22
 c76:	70 95       	com	r23
 c78:	80 95       	com	r24
 c7a:	90 95       	com	r25
 c7c:	9b 01       	movw	r18, r22
 c7e:	ac 01       	movw	r20, r24
 c80:	bd 01       	movw	r22, r26
 c82:	cf 01       	movw	r24, r30
 c84:	08 95       	ret

00000c86 <random_r>:
 c86:	8f 92       	push	r8
 c88:	9f 92       	push	r9
 c8a:	af 92       	push	r10
 c8c:	bf 92       	push	r11
 c8e:	cf 92       	push	r12
 c90:	df 92       	push	r13
 c92:	ef 92       	push	r14
 c94:	ff 92       	push	r15
 c96:	cf 93       	push	r28
 c98:	df 93       	push	r29
 c9a:	ec 01       	movw	r28, r24
 c9c:	68 81       	ld	r22, Y
 c9e:	79 81       	ldd	r23, Y+1	; 0x01
 ca0:	8a 81       	ldd	r24, Y+2	; 0x02
 ca2:	9b 81       	ldd	r25, Y+3	; 0x03
 ca4:	61 15       	cp	r22, r1
 ca6:	71 05       	cpc	r23, r1
 ca8:	81 05       	cpc	r24, r1
 caa:	91 05       	cpc	r25, r1
 cac:	21 f4       	brne	.+8      	; 0xcb6 <random_r+0x30>
 cae:	64 e2       	ldi	r22, 0x24	; 36
 cb0:	79 ed       	ldi	r23, 0xD9	; 217
 cb2:	8b e5       	ldi	r24, 0x5B	; 91
 cb4:	97 e0       	ldi	r25, 0x07	; 7
 cb6:	2d e1       	ldi	r18, 0x1D	; 29
 cb8:	33 ef       	ldi	r19, 0xF3	; 243
 cba:	41 e0       	ldi	r20, 0x01	; 1
 cbc:	50 e0       	ldi	r21, 0x00	; 0
 cbe:	a5 df       	rcall	.-182    	; 0xc0a <__divmodsi4>
 cc0:	49 01       	movw	r8, r18
 cc2:	5a 01       	movw	r10, r20
 cc4:	9b 01       	movw	r18, r22
 cc6:	ac 01       	movw	r20, r24
 cc8:	a7 ea       	ldi	r26, 0xA7	; 167
 cca:	b1 e4       	ldi	r27, 0x41	; 65
 ccc:	a8 d0       	rcall	.+336    	; 0xe1e <__muluhisi3>
 cce:	6b 01       	movw	r12, r22
 cd0:	7c 01       	movw	r14, r24
 cd2:	ac ee       	ldi	r26, 0xEC	; 236
 cd4:	b4 ef       	ldi	r27, 0xF4	; 244
 cd6:	a5 01       	movw	r20, r10
 cd8:	94 01       	movw	r18, r8
 cda:	ad d0       	rcall	.+346    	; 0xe36 <__mulohisi3>
 cdc:	dc 01       	movw	r26, r24
 cde:	cb 01       	movw	r24, r22
 ce0:	8c 0d       	add	r24, r12
 ce2:	9d 1d       	adc	r25, r13
 ce4:	ae 1d       	adc	r26, r14
 ce6:	bf 1d       	adc	r27, r15
 ce8:	b7 ff       	sbrs	r27, 7
 cea:	03 c0       	rjmp	.+6      	; 0xcf2 <random_r+0x6c>
 cec:	01 97       	sbiw	r24, 0x01	; 1
 cee:	a1 09       	sbc	r26, r1
 cf0:	b0 48       	sbci	r27, 0x80	; 128
 cf2:	88 83       	st	Y, r24
 cf4:	99 83       	std	Y+1, r25	; 0x01
 cf6:	aa 83       	std	Y+2, r26	; 0x02
 cf8:	bb 83       	std	Y+3, r27	; 0x03
 cfa:	bc 01       	movw	r22, r24
 cfc:	cd 01       	movw	r24, r26
 cfe:	9f 77       	andi	r25, 0x7F	; 127
 d00:	df 91       	pop	r29
 d02:	cf 91       	pop	r28
 d04:	ff 90       	pop	r15
 d06:	ef 90       	pop	r14
 d08:	df 90       	pop	r13
 d0a:	cf 90       	pop	r12
 d0c:	bf 90       	pop	r11
 d0e:	af 90       	pop	r10
 d10:	9f 90       	pop	r9
 d12:	8f 90       	pop	r8
 d14:	08 95       	ret

00000d16 <random>:
 d16:	8f 92       	push	r8
 d18:	9f 92       	push	r9
 d1a:	af 92       	push	r10
 d1c:	bf 92       	push	r11
 d1e:	cf 92       	push	r12
 d20:	df 92       	push	r13
 d22:	ef 92       	push	r14
 d24:	ff 92       	push	r15
 d26:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 d2a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 d2e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 d32:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 d36:	61 15       	cp	r22, r1
 d38:	71 05       	cpc	r23, r1
 d3a:	81 05       	cpc	r24, r1
 d3c:	91 05       	cpc	r25, r1
 d3e:	21 f4       	brne	.+8      	; 0xd48 <random+0x32>
 d40:	64 e2       	ldi	r22, 0x24	; 36
 d42:	79 ed       	ldi	r23, 0xD9	; 217
 d44:	8b e5       	ldi	r24, 0x5B	; 91
 d46:	97 e0       	ldi	r25, 0x07	; 7
 d48:	2d e1       	ldi	r18, 0x1D	; 29
 d4a:	33 ef       	ldi	r19, 0xF3	; 243
 d4c:	41 e0       	ldi	r20, 0x01	; 1
 d4e:	50 e0       	ldi	r21, 0x00	; 0
 d50:	5c df       	rcall	.-328    	; 0xc0a <__divmodsi4>
 d52:	49 01       	movw	r8, r18
 d54:	5a 01       	movw	r10, r20
 d56:	9b 01       	movw	r18, r22
 d58:	ac 01       	movw	r20, r24
 d5a:	a7 ea       	ldi	r26, 0xA7	; 167
 d5c:	b1 e4       	ldi	r27, 0x41	; 65
 d5e:	5f d0       	rcall	.+190    	; 0xe1e <__muluhisi3>
 d60:	6b 01       	movw	r12, r22
 d62:	7c 01       	movw	r14, r24
 d64:	ac ee       	ldi	r26, 0xEC	; 236
 d66:	b4 ef       	ldi	r27, 0xF4	; 244
 d68:	a5 01       	movw	r20, r10
 d6a:	94 01       	movw	r18, r8
 d6c:	64 d0       	rcall	.+200    	; 0xe36 <__mulohisi3>
 d6e:	dc 01       	movw	r26, r24
 d70:	cb 01       	movw	r24, r22
 d72:	8c 0d       	add	r24, r12
 d74:	9d 1d       	adc	r25, r13
 d76:	ae 1d       	adc	r26, r14
 d78:	bf 1d       	adc	r27, r15
 d7a:	b7 ff       	sbrs	r27, 7
 d7c:	03 c0       	rjmp	.+6      	; 0xd84 <random+0x6e>
 d7e:	01 97       	sbiw	r24, 0x01	; 1
 d80:	a1 09       	sbc	r26, r1
 d82:	b0 48       	sbci	r27, 0x80	; 128
 d84:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 d88:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 d8c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 d90:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 d94:	bc 01       	movw	r22, r24
 d96:	cd 01       	movw	r24, r26
 d98:	9f 77       	andi	r25, 0x7F	; 127
 d9a:	ff 90       	pop	r15
 d9c:	ef 90       	pop	r14
 d9e:	df 90       	pop	r13
 da0:	cf 90       	pop	r12
 da2:	bf 90       	pop	r11
 da4:	af 90       	pop	r10
 da6:	9f 90       	pop	r9
 da8:	8f 90       	pop	r8
 daa:	08 95       	ret

00000dac <srandom>:
 dac:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 db0:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 db4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 db8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 dbc:	08 95       	ret

00000dbe <memcpy_P>:
 dbe:	fb 01       	movw	r30, r22
 dc0:	dc 01       	movw	r26, r24
 dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <memcpy_P+0xa>
 dc4:	05 90       	lpm	r0, Z+
 dc6:	0d 92       	st	X+, r0
 dc8:	41 50       	subi	r20, 0x01	; 1
 dca:	50 40       	sbci	r21, 0x00	; 0
 dcc:	d8 f7       	brcc	.-10     	; 0xdc4 <memcpy_P+0x6>
 dce:	08 95       	ret

00000dd0 <eeprom_read_block>:
 dd0:	dc 01       	movw	r26, r24
 dd2:	cb 01       	movw	r24, r22

00000dd4 <eeprom_read_blraw>:
 dd4:	fc 01       	movw	r30, r24
 dd6:	f9 99       	sbic	0x1f, 1	; 31
 dd8:	fe cf       	rjmp	.-4      	; 0xdd6 <eeprom_read_blraw+0x2>
 dda:	06 c0       	rjmp	.+12     	; 0xde8 <eeprom_read_blraw+0x14>
 ddc:	f2 bd       	out	0x22, r31	; 34
 dde:	e1 bd       	out	0x21, r30	; 33
 de0:	f8 9a       	sbi	0x1f, 0	; 31
 de2:	31 96       	adiw	r30, 0x01	; 1
 de4:	00 b4       	in	r0, 0x20	; 32
 de6:	0d 92       	st	X+, r0
 de8:	41 50       	subi	r20, 0x01	; 1
 dea:	50 40       	sbci	r21, 0x00	; 0
 dec:	b8 f7       	brcc	.-18     	; 0xddc <eeprom_read_blraw+0x8>
 dee:	08 95       	ret

00000df0 <eeprom_write_block>:
 df0:	dc 01       	movw	r26, r24
 df2:	cb 01       	movw	r24, r22
 df4:	02 c0       	rjmp	.+4      	; 0xdfa <eeprom_write_block+0xa>
 df6:	2d 91       	ld	r18, X+
 df8:	05 d0       	rcall	.+10     	; 0xe04 <eeprom_write_r18>
 dfa:	41 50       	subi	r20, 0x01	; 1
 dfc:	50 40       	sbci	r21, 0x00	; 0
 dfe:	d8 f7       	brcc	.-10     	; 0xdf6 <eeprom_write_block+0x6>
 e00:	08 95       	ret

00000e02 <eeprom_write_byte>:
 e02:	26 2f       	mov	r18, r22

00000e04 <eeprom_write_r18>:
 e04:	f9 99       	sbic	0x1f, 1	; 31
 e06:	fe cf       	rjmp	.-4      	; 0xe04 <eeprom_write_r18>
 e08:	1f ba       	out	0x1f, r1	; 31
 e0a:	92 bd       	out	0x22, r25	; 34
 e0c:	81 bd       	out	0x21, r24	; 33
 e0e:	20 bd       	out	0x20, r18	; 32
 e10:	0f b6       	in	r0, 0x3f	; 63
 e12:	f8 94       	cli
 e14:	fa 9a       	sbi	0x1f, 2	; 31
 e16:	f9 9a       	sbi	0x1f, 1	; 31
 e18:	0f be       	out	0x3f, r0	; 63
 e1a:	01 96       	adiw	r24, 0x01	; 1
 e1c:	08 95       	ret

00000e1e <__muluhisi3>:
 e1e:	0f d0       	rcall	.+30     	; 0xe3e <__umulhisi3>
 e20:	a5 9f       	mul	r26, r21
 e22:	90 0d       	add	r25, r0
 e24:	b4 9f       	mul	r27, r20
 e26:	90 0d       	add	r25, r0
 e28:	a4 9f       	mul	r26, r20
 e2a:	80 0d       	add	r24, r0
 e2c:	91 1d       	adc	r25, r1
 e2e:	11 24       	eor	r1, r1
 e30:	08 95       	ret

00000e32 <__mulshisi3>:
 e32:	b7 ff       	sbrs	r27, 7
 e34:	f4 cf       	rjmp	.-24     	; 0xe1e <__muluhisi3>

00000e36 <__mulohisi3>:
 e36:	f3 df       	rcall	.-26     	; 0xe1e <__muluhisi3>
 e38:	82 1b       	sub	r24, r18
 e3a:	93 0b       	sbc	r25, r19
 e3c:	08 95       	ret

00000e3e <__umulhisi3>:
 e3e:	a2 9f       	mul	r26, r18
 e40:	b0 01       	movw	r22, r0
 e42:	b3 9f       	mul	r27, r19
 e44:	c0 01       	movw	r24, r0
 e46:	a3 9f       	mul	r26, r19
 e48:	70 0d       	add	r23, r0
 e4a:	81 1d       	adc	r24, r1
 e4c:	11 24       	eor	r1, r1
 e4e:	91 1d       	adc	r25, r1
 e50:	b2 9f       	mul	r27, r18
 e52:	70 0d       	add	r23, r0
 e54:	81 1d       	adc	r24, r1
 e56:	11 24       	eor	r1, r1
 e58:	91 1d       	adc	r25, r1
 e5a:	08 95       	ret

00000e5c <_exit>:
 e5c:	f8 94       	cli

00000e5e <__stop_program>:
 e5e:	ff cf       	rjmp	.-2      	; 0xe5e <__stop_program>
